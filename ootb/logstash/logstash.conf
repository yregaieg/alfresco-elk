##
## Tomcat catalina.out logs
##
input {
  file {
    type => "alfresco-log"
    path => ["${tomcatLogs}/catalina.out", "${tomcatLogs}/catalina*out*"]
  }
}

##
## HTTP Poller (for Community Edition via webscript)         
##

##
## OOTB Admin performance webscript
## 
input {
  http_poller {
    id => "ootb-poller-performance"
    type => "ootb-performance"
    urls => {

      alfie_perform => {
         url => "${alfie_perform_url}"
         method => "GET" 
         headers => {
          Accept => "application/json"
         }
         auth => {
          user => "${alfie_user}"
          password => "${alfie_pass}"
         }
      }

    }
    automatic_retries => 0
    #schedule => { cron => "* * * * * UTC"}
    schedule => { every => "60s" }
    request_timeout => 8
    #metadata_target => http_poller_metadata
    #tags => ootb
  }
}

##
## OOTB Active sessions webscript
## 
input {
  http_poller {
    id => "ootb-poller-sessions"
    type => "ootb-sessions"
    urls => {

      alfie_perform => {
         url => "${alfie_session_url}"
         method => "GET" 
         headers => {
          Accept => "application/json"
         }
         auth => {
          user => "${alfie_user}"
          password => "${alfie_pass}"
         }
      }

    }
    automatic_retries => 0
    schedule => { every => "60s" }
    request_timeout => 8
    #metadata_target => http_poller_metadata
    #tags => ootb
  }
}

##
## OOTB SOLR webscript
## 
input {
  http_poller {
    id => "ootb-poller-solr"
    type => "ootb-solr"
    urls => {

      alfie_solr => {
         url => "${alfie_indices_url}"
         method => "GET" 
         headers => {
          Accept => "application/json"
         }
         auth => {
          user => "${alfie_user}"
          password => "${alfie_pass}"
         }
      }

    }
    automatic_retries => 0
    schedule => { every => "10m" }
    request_timeout => 8
    #metadata_target => http_poller_metadata
    #tags => ootb
  }
}

##
## Filters for alfresco-log 
##
filter {
  if [type] == "alfresco-log" {
    # replace double blank space with single blank space
    mutate {
      gsub => [
        "message", "  ", " "
      ]
    }

    # Match incoming log entries to fields logLevel, class and Msg
    grok { 
      match => [ "message", "%{TIMESTAMP_ISO8601:logdate}\s*%{LOGLEVEL:logLevel} %{NOTSPACE:class}\s*%{GREEDYDATA:Msg}" ] 
    }

    # Match logdate from timestamp
    date {
       match => ["logdate" , "yyyy-MM-dd HH:mm:ss,SSS"]
       target => "@timestamp"
    }
  }
}

##
## Filters for OOTB 
##

##
## Trick: For logstash-* indices schema fields to be considered as numbers. 
##        If not they can be mapped as strings and so, no aggregatables are possible for visualizations 
##

# Convert string metric to numeric value
filter {
  if [type] == "ootb-performance" {
    mutate {
      convert => { "MaxMemory" => "float" }
      convert => { "TotalMemory" => "float" }
      convert => { "UsedMemory" => "float" }
      convert => { "FreeMemory" => "float" }
      convert => { "ProcessLoad" => "float" }
      convert => { "SystemLoad" => "float" }
      convert => { "ThreadCount" => "float" }
      convert => { "PeakThreadCount" => "float" }
    } 
  }
}

# Convert string metric to numeric value
filter { 
  if [type] == "ootb-sessions" {
    mutate {
      convert => { "NumActive" => "float" }
      convert => { "MaxActive" => "float" }
      convert => { "NumIdle" => "float" }
      convert => { "UserCountNonExpired" => "float" }
      convert => { "TicketCountNonExpired" => "float" }
    } 
  }
}

# Convert string metric to numeric value
filter { 
  if [type] == "ootb-solr" {
    mutate {
      convert => { "alfresco.numDocs" => "float" }
      convert => { "alfresco.maxDocs" => "float" }
      convert => { "alfresco.deletedDocs" => "float" }
      convert => { "alfresco.diskUsage" => "float" }
      convert => { "alfresco.memoryUsage" => "float" }

      convert => { "archive.numDocs" => "float" }
      convert => { "archive.maxDocs" => "float" }
      convert => { "archive.deletedDocs" => "float" }
      convert => { "archive.diskUsage" => "float" }
      convert => { "archive.memoryUsage" => "float" }
    } 
  }
}

##
## Output to Elasticsearch 
##

output {
  #Uncomment for debugging purposes
  #stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["${alfrescoELKServer}:9200"]
  }

}
